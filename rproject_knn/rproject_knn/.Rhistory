wbcd <- read.csv("wisc_bc_data.csv", stringAsFactors = False)
wbcd <- read.csv("wisc_bc_data.csv", stringAsFactors = False)
wbcd <- read.csv("wisc_bc_data.csv", stringAsFactors = FALSE)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd
top(wbcd)
wbcd(1:5)
str(wbcd)
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malinant"))
table(wbcd$diagnosis)
help(roud)
help(round)
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
v
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
lapply(wbcd[2:31])
lapply(wbcd[2:31],normalize)
v
normalize <- function(x) {     return((x - min(x)) / (max(x) - min(x))) }
lapply(wbcd[2:31],normalize)
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize));
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
str(wbcd[2:31])
str(wbcd[3:31])
str(wbcd[1:31])
wbcd <- wbcd[-1];
str(wbcd[1:31])
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize));
v
summary(wbcd_n$area_mean)
wbcd_train <- wbcd_n[1:436,]; wbcd_test <- wbcd_n[170:569,];
wbcd[1:469, 1]
install.packages("class"); #knn返回一个因子向量，为测试数据集里面的每一个案例返回一个预测标签 wbcd_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k = 21) #k为标识最临近目标的整数
install.packages("class"); #knn返回一个因子向量，为测试数据集里面的每一个案例返回一个预测标签 wbcd_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k = 21) #k为标识最临近目标的整数
wbcd_train <- wbcd_n[1:436,]; wbcd_test <- wbcd_n[170:569,]; #将类的标签(Benign/Malinant)提取出来 wbcd_train_labels <- wbcd[1:469, 1] wbcd_test_labels <- wbcd_n[170:569, 1];
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k = 21)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k = 21)
install.packages("class");
wbcd_z <- as.data.frame(scale(wbcd[-1])); summary(wbcd_z$area_mean)
wbcd_train_labels <- wbcd[1:469, 1] wbcd_test_labels <- wbcd[170:569, 1];
v
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k = 21) #k为标识最临近目标的整数
##使用knn分类学习对数据进行分类 wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE); ## 将第一列id剔除 wbcd <- wbcd[-1]; #diagnosis属性->良性/恶性,使用table生成diagonosis的一元表 table(wbcd$diagnosis) #对diagonisis重新编码 wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malinant")); #两个属性所占的百分比 round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1) #举例观察三个特征 summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")]) ###################################################################### #对上面的三类数据进行标准化 #标准化函数 normalize <- function(x) {     return((x - min(x)) / (max(x) - min(x))) } #对数值数据标准化 wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize)); #测试标准化 summary(wbcd_n$area_mean) ###################################################################### #数据准备：将数据拆分为训练数据和测试数据 wbcd_train <- wbcd_n[1:436,]; wbcd_test <- wbcd_n[170:569,]; #将类的标签(Benign/Malinant)提取出来 wbcd_train_labels <- wbcd[1:469, 1] wbcd_test_labels <- wbcd[170:569, 1]; ###################################################################### #训练模型 install.packages("class"); ##使用knn分类学习对数据进行分类 wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE); ## 将第一列id剔除 wbcd <- wbcd[-1]; #diagnosis属性->良性/恶性,使用table生成diagonosis的一元表 table(wbcd$diagnosis) #对diagonisis重新编码 wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malinant")); #两个属性所占的百分比 round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1) #举例观察三个特征 summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")]) ###################################################################### #对上面的三类数据进行标准化 #标准化函数 normalize <- function(x) {     return((x - min(x)) / (max(x) - min(x))) } #对数值数据标准化 wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize)); #测试标准化 summary(wbcd_n$area_mean) ###################################################################### #数据准备：将数据拆分为训练数据和测试数据 wbcd_train <- wbcd_n[1:436,]; wbcd_test <- wbcd_n[170:569,]; #将类的标签(Benign/Malinant)提取出来 wbcd_train_labels <- wbcd[1:469, 1] wbcd_test_labels <- wbcd[170:569, 1]; ###################################################################### #训练模型 install.packages("class");
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k = 21)
sms <- read.csv("sms_spam.csv", stringsAsFactors = FALSE);
sms <- read.csv("sms_spam.csv", stringsAsFactors = FALSE);
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE);
sms_raw <- read.csv("sms_spam.csv",stringsAsFactors = FALSE)
sms_raw <- read.csv("sms_spam.csv", header = TRUE, stringsAsFactors = FALSE);
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE);
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE);
