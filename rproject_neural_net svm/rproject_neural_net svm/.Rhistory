concrete <- read.csv("concrete.csv")
concrete
str(concrete)
lapply(concrete, normalize)
normalize <- function(x) {     return((x - min(x)) / (max(x) - min(x))) }
lapply(concrete, normalize)
str(concrete_nom <- as.data.frame(lapply(concrete, normalize)) )
summary(concrete$strength) summary(concrete_nom$strength)
#分离训练数据和测试数据 concrete_train <- concrete_nom[1:773]; concrete_test <- concter[774:1030];
concrete_train <- concrete_nom[1:773]; concrete_test <- conrete_nom[774:1030];
concrete_train <- concrete_nom[1:773]; concrete_test <- concrete_nom[774:1030];
concrete_train <- concrete_nom[1:773,]; concrete_test <- concrete_nom[774:1030,];
install.packages("neuralnet")
library(neuralnet)
concrete_model <- neuralnet(strength ~ cemet + slag + ash + water + superlastic + coarseagg + fineagg + age, data = concrete_train)
concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superlastic + coarseagg + fineagg + age, data = concrete_train)
concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superlpastic + coarseagg + fineagg + age, data = concrete_train)
concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superlplastic + coarseagg + fineagg + age, data = concrete_train)
concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train)
plot(concrete_model)
plot(concrete_model)
plot(concrete_model)
plot(concrete_model)
plot(concrete_model)
str(concrete_test)
str(concrete_model)
model_results <- compute(concrete_model, concrete_test[1:8]);
predicted_strength <- model_results$net.result
predicted_strength <- model_results$net.result
predicted_strength
cor(predicted_strength, concrete$strength) #获取数值向量间的相关性
cor(predicted_strength, concrete_test$strength) #获取数值向量间的相关性
concrete_model2 <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_model, hidden = 5) #隐藏层节点数增加为5
concrete_model2 <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_model, hidden = 5) #隐藏层节点数增加为5
plot(concrete_model2)
concrete_model2 <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train, hidden = 5) #隐藏层节点数增加为5
plot(concrete_model2)
strength
concrete_model2$strength
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strenth2 <- model_results2$net.result cor(predicted_strenth2, concrete_test$strength)
v
letters <- read.csv("letterdata.csv") str(letters)
source("C:/Users/Lucas/Source/Repos/ML-and-R-Language/rproject_neural_net svm/rproject_neural_net svm/neural net.R", encoding = "gb2312")
letters_train <- letters[1:16000,] letters_test <- letters[16001:20000,]
install.packages("kernlab") library(kernlab)
letter_classifirer <- ksvm(letter ~ ., data = letters_train, kernel = "vanilladot") letter_classifirer
letter_predictions <- predict(letter_classifirer, letters_test); head(letter_predictions)
table(letter_predictions, letter$letter)
table(letter_predictions, letters_test$letter)
agreement <- letter_predictions == letters_test$letter
agreement
table(agreement)
str(letter_predictions)
letter_predictions
letters_test$letter
table(agreement) #列出正确和错误的次数 prop.table(table(agreement)) #用百分数来表示
letter_classifirer_rbf <- ksvm(letter ~ ., data = letters_train, kernel = "rbfdot") letter_predictions <- predict(letter_classifirer_rbf, letters_test) agreement_rbf <- letter_predictions == letters_test$letter table(agreement_rbf) #列出正确和错误的次数 prop.table(table(agreement_rbf)) #用小数来表示
